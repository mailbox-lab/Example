from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
import numpy as np
import PIL
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

import kagglehub

# Download latest version
path = kagglehub.dataset_download("mehradaria/covid19-lung-ct-scans")

print("Path to dataset files:", path)

import pathlib
# Path to the dataset in your Google Drive
data_dir = '/root/.cache/kagglehub/datasets/mehradaria/covid19-lung-ct-scans/versions/1/COVID-19_Lung_CT_Scans'

data_dir = pathlib.Path(data_dir)
image_count = len(list(data_dir.glob('**/*.png')))  # Use ** to search recursively in subfolders
print(image_count)


# Get a list of all PNG files in the COVID-19 directory
COVID_19 = list(data_dir.glob('COVID-19/*'))
image_count1=len(COVID_19)
print(image_count1)


# Get a list of all PNG files in the Non-COVID-19 directory
Non_COVID_19 = list(data_dir.glob('Non-COVID-19/*'))
image_count2=len(Non_COVID_19)
print(image_count2)

Covid_19 = list(data_dir.glob('COVID-19/*'))
PIL.Image.open(str(Covid_19[0]))

Non_Covid_19 = list(data_dir.glob('Non-COVID-19/*'))
PIL.Image.open(str(Non_Covid_19[0]))

batch_size = 16
img_height = 224
img_width = 224

train_ds = tf.keras.utils.image_dataset_from_directory(data_dir,
  validation_split=0.2,
  subset="training",
  seed=2,
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=2,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)

normalization_layer = layers.Rescaling(1./255)

normalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
image_batch, labels_batch = next(iter(normalized_ds))
first_image = image_batch[0]
# Notice the pixel values are now in `[0,1]`.
print(np.min(first_image), np.max(first_image))

# Define data augmentation pipeline
data_augmentation = keras.Sequential([
    layers.RandomFlip("horizontal"),
    layers.RandomRotation(0.1, seed=2),
    layers.RandomZoom(0.1, seed=2),
    layers.RandomFlip(seed=2),
    layers.RandomBrightness(0.2, seed=2),
    layers.RandomContrast(0.3, seed=2),
], name='data_augmentation')

plt.figure(figsize=(10, 10))
for images, _ in train_ds.take(1):
  for i in range(9):
    augmented_images = data_augmentation(images)
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(augmented_images[0].numpy().astype("uint8"))
    plt.axis("off")

from tensorflow.keras import layers, models

num_classes = len(class_names)

from tensorflow.keras.applications import ResNet50  # Import the ResNet50 class

# Load the ResNet50 base model with pretrained weights, excluding the top layers
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(img_height, img_width, 3))
base_model.trainable = False  # Freeze the base model layers

# Apply data augmentation as a preprocessing layer in the model
model = models.Sequential([
    layers.Input(shape=(img_height, img_width, 3)),  # Explicitly define input shape
    data_augmentation,  # Add data augmentation pipeline
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dropout(0.5),
    layers.Dense(128, activation='relu'),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

epochs=21
history = model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=epochs
)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(12, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

# Convert the model.
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the model.
with open('model.tflite', 'wb') as f:
  f.write(tflite_model)


# Path to the image in your Google Drive
cov_path = '/root/.cache/kagglehub/datasets/mehradaria/covid19-lung-ct-scans/versions/1/COVID-19_Lung_CT_Scans/COVID-19/COVID-19_0001.png'

# Load the image
img = tf.keras.preprocessing.image.load_img(cov_path, target_size=(img_height, img_width))
img_array = tf.keras.preprocessing.image.img_to_array(img)

img_array = tf.expand_dims(img_array, 0) # Create a batch

# Print the image
plt.imshow(img)
plt.axis('off')  # Remove axes
plt.show()

# Make predictions
predictions = model.predict(img_array)
score = tf.nn.softmax(predictions[0])

# Output the prediction result
class_names = ['COVID-19', 'Non-COVID-19']  # Define your class names
print("This image most likely belongs to {} with a {:.2f} percent confidence.".format(class_names[np.argmax(score)], 100 * np.max(score)))
